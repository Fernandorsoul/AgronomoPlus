// <auto-generated />
using System;
using AgronomoPlus.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AgronomoPlus.Infrastructure.Migrations
{
    [DbContext(typeof(AgroPlusDbContext))]
    partial class AgroPlusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgronomoPlus.Domain.Models.AnaliseDeSolo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Aluminio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Calcio")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DataAnalise")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Enxofre")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Fosforo")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Magnesio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MateriaOrganica")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Nitrogenio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PH")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Potassio")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PropriedadeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Recomendacoes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PropriedadeId");

                    b.ToTable("Analises");
                });

            modelBuilder.Entity("AgronomoPlus.Domain.Models.ControlePragasEDoencas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcoesDeControle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlantioId")
                        .HasColumnType("uuid");

                    b.Property<string>("TipoPragaOuDoenca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlantioId");

                    b.ToTable("ControlePragas");
                });

            modelBuilder.Entity("AgronomoPlus.Domain.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UltimoAcesso")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("AgronomoPlus.Domain.Models.Plantio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adubacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CorrecaoSolo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PrevisaoColheita")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PropriedadeId")
                        .HasColumnType("uuid");

                    b.Property<int>("TempoCrecimento")
                        .HasColumnType("integer");

                    b.Property<string>("TipoSemente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoSolo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PropriedadeId");

                    b.ToTable("Plantios");
                });

            modelBuilder.Entity("AgronomoPlus.Domain.Models.Propriedade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TamanhoArea")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Propriedades");
                });

            modelBuilder.Entity("ControleFinanceiro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataTransacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PropriedadeId")
                        .HasColumnType("uuid");

                    b.Property<string>("TipoTransacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PropriedadeId");

                    b.ToTable("Financeiros");
                });

            modelBuilder.Entity("AgronomoPlus.Domain.Models.AnaliseDeSolo", b =>
                {
                    b.HasOne("AgronomoPlus.Domain.Models.Propriedade", "Propriedade")
                        .WithMany()
                        .HasForeignKey("PropriedadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propriedade");
                });

            modelBuilder.Entity("AgronomoPlus.Domain.Models.ControlePragasEDoencas", b =>
                {
                    b.HasOne("AgronomoPlus.Domain.Models.Plantio", "Plantio")
                        .WithMany()
                        .HasForeignKey("PlantioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plantio");
                });

            modelBuilder.Entity("AgronomoPlus.Domain.Models.Plantio", b =>
                {
                    b.HasOne("AgronomoPlus.Domain.Models.Propriedade", "Propriedade")
                        .WithMany()
                        .HasForeignKey("PropriedadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propriedade");
                });

            modelBuilder.Entity("AgronomoPlus.Domain.Models.Propriedade", b =>
                {
                    b.HasOne("AgronomoPlus.Domain.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ControleFinanceiro", b =>
                {
                    b.HasOne("AgronomoPlus.Domain.Models.Propriedade", "Propriedade")
                        .WithMany()
                        .HasForeignKey("PropriedadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propriedade");
                });
#pragma warning restore 612, 618
        }
    }
}
